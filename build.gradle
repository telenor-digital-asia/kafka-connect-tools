buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
        classpath 'com.github.maiflai:gradle-scalatest:0.19'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

ext {
    scalaMajorVersion = "2.11"
    scalaVersion = "2.11.7"
    slf4jVersion = "1.7.7"
    sprayJsonVersion = "1.3.2"
    sprayCanVersion = "1.3.3"
    scalajHttpVerson = "2.2.1"
    scoptVersion = "3.4.0"
    akkaVersion = "2.4.3"
    guavaVersion = "23.0"
    scalaMockVersion = "3.2.2"
    scalaTestVersion = "2.2.6"
    scalaLoggingVersion = '2.1.2'
}

apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'

allprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'com.datamountaineer'
    version = version
    description = "kafka-connect-cli"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
    }
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
    compile group: 'io.spray', name: "spray-json_$scalaMajorVersion", version: sprayJsonVersion
    compile group: 'io.spray', name: "spray-can_$scalaMajorVersion", version: sprayCanVersion
    compile group: 'org.scalaj', name: "scalaj-http_$scalaMajorVersion", version: scalajHttpVerson
    compile group: 'com.github.scopt', name: "scopt_$scalaMajorVersion", version: scoptVersion
    compile group: 'com.typesafe.akka', name: "akka-actor_$scalaMajorVersion", version: akkaVersion
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    testCompile group: 'org.scalamock', name: "scalamock-scalatest-support_$scalaMajorVersion", version: scalaMockVersion
    testCompile group: 'org.scalatest', name: "scalatest_$scalaMajorVersion", version: scalaTestVersion
    testRuntime 'org.pegdown:pegdown:1.1.0'
}

//sourceSets.main.java.srcDirs = []
//sourceSets.test.java.srcDirs = []

test {
    maxParallelForks = 1
    minHeapSize '256m'
    maxHeapSize '2048m'
    systemProperty "log4j.configuration","${projectDir}/test/resources/log4j.properties"
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task scaladocJar(type: Jar) {
    classifier = 'scaladoc'
    from '../LICENSE'
    from scaladoc
}

artifacts {
    archives javadocJar, scaladocJar, sourcesJar
}

tasks.withType(Tar) {
    compression Compression.GZIP
    extension = 'tgz'
}

task compile(dependsOn: 'compileScala')
task fatJar(dependsOn : ['clean', 'test', 'shadowJar'])

task fatJarNoTest(dependsOn : 'shadowJar')

signing {
    sign configurations.archives
}

tasks.withType(Jar) {
    manifest {
        attributes 'Main-Class': 'com.datamountaineer.connect.tools.Cli'
    }
}

task buildCli(type: Exec, dependsOn: [fatJar]) {
   commandLine "bin/package.sh", version
}

if (project.hasProperty('release')) {

    // OSSRH publication
    uploadArchives {
        repositories {
            mavenDeployer {
                // POM signature
                beforeDeployment { MavenDeployment deployment ->
                    signing.signPom(deployment)
                }
                // Target repository
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    description project.description
                    packaging 'jar'
                    url 'https://github.com/landoop/kafka-connect-tools'

                    scm {
                        connection 'scm:git:https://github.com/landoop/kafka-connect-tools.git'
                        developerConnection 'scm:git:git@github.com:landoop/kafka-connect-tools.git'
                        url 'https://github.com/landoop/kafka-connect-tools.git'
                    }

                    licenses {
                        license {
                            name 'Apache License 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrewstevenson'
                            name = 'Andrew Stevenson'
                            email = 'andrew@landoop.com'
                        }
                        developer {
                            id = 'rollulus'
                            name = 'Roel'
                            email = 'rollulus@xs4all.nl'
                        }
                    }
                }
            }

        }
    }
}

nexusStaging {
    packageGroup = project.getGroup()
    username = ossrhUsername
    password = ossrhPassword
}

task makeCli(type: Exec, dependsOn: [fatJar]) {
    executable "bin/package.sh"
    args = [version]
}